// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id          Int      @id @default(autoincrement())
  title       String
  author      String
  publisher   String
  price       String   // Display price (e.g., "K40000/$4.5")
  numericPrice Float   // Numeric price for calculations
  image       String
  pdfUrl      String
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([title])
  @@index([author])
  // Relationship with OrderItem
  orderItems  OrderItem[]
  cartItems   CartItem[]

  @@map("booklist")
}

model Order {
  id          Int         @id @default(autoincrement())
  customerName String?
  customerEmail String?
  totalAmount Float
  status      OrderStatus 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String?     // Null for guest orders
  role        String      @default("user")
   
  @@index([userId])
  @@index([status])
  // Relationship with OrderItem
  orderItems  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id              Int   @id @default(autoincrement())
  order           Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         Int
  book            Book  @relation(fields: [bookId], references: [id])
  bookId          Int
  quantity        Int   @default(1)
  priceAtPurchase Float // Price at time of purchase

  @@index([orderId])
  @@index([bookId])

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model CartItem {
  id       String @id @default(cuid())
  book     Book   @relation(fields: [bookId], references: [id])
  bookId   Int
  userId   String 
  quantity Int    @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    
  priceAtAddition Float // Snapshot of price when added

  @@index([bookId])
}

model Cart {
  id          Int      @id @default(autoincrement())
  userId      String?  // 
  sessionId   String   @unique
  
  total       Float    @default(0) // Total amount
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([sessionId])
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("user") // "admin" or "user"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}