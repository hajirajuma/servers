// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id          Int      @id @default(autoincrement())
  title       String
  author      String
  publisher   String
  price       String   // Display price (e.g., "K40000/$4.5")
  numericPrice Float   // Numeric price for calculations
  image       String
  pdfUrl      String
 category  String?
  cartItems CartItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
   @@index([title])
  @@index([author])
  // Relationship with OrderItem
  orderItems  OrderItem[]

  @@map("booklist")
}

model Order {
  id          Int         @id @default(autoincrement())
  customerName String?
  customerEmail String?
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relationship with OrderItem
  orderItems  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       Int @id @default(autoincrement())
  quantity Int
  price    Float // Price at time of order
  
  // Foreign keys
  orderId  Int
  bookId   Int
  
  // Relationships
  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book     Book  @relation(fields: [bookId], references: [id])

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model CartItem {
  id       String @id @default(cuid())
  bookId   String
  book     String
  userId   String // Can be "guest" for non-authenticated users
  quantity Int    @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    
  priceAtAddition Int // Snapshot of price when added

  @@unique([cartId, bookId])
  @@index([cartId])
  @@index([bookId])
}

model Cart {
  id        String   @id @default(auto()) @map("_id")
  userId    String?  // Null for guest carts
  sessionId String   @unique
  items     CartItem[]
  total     Int      @default(0) // Total in cents/minor units
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([sessionId])
}
enum OrderStatus {
  Pending
  Unpaid
  Paid
  Shipped
  Delivered
}

model Order {
  id        String     @id @default(auto()) @map("_id")
  userId    String?    // Null for guest orders
  user      User?      @relation(fields: [userId], references: [id])
  items     OrderItem[]
  total     Int        @default(0) // Total in cents
  status    OrderStatus @default(Pending)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id               String  @id @default(auto()) @map("_id")
  order            Order   @relation(fields: [orderId], references: [id])
  orderId          String
  book             Book    @relation(fields: [bookId], references: [id])
  bookId           Int
  quantity         Int     @default(1)
  priceAtPurchase  Int     // Price in cents at time of purchase

  @@index([orderId])
  @@index([bookId])
}

model User {
  id        String   @id @default(auto()) @map("_id")
  email     String   @unique
  name      String?
  password  String
  role      String   @default("user") // "admin" or "user"
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

enum OrderStatus {
  Pending
  Unpaid
  Paid
  Shipped
  Delivered
}

model Order {
  id        String     @id @default(auto()) @map("_id")
  userId    String?    // Null for guest orders
  user      User?      @relation(fields: [userId], references: [id])
  items     OrderItem[]
  total     Int        @default(0) // Total in cents
  status    OrderStatus @default(Pending)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id               String  @id @default(auto()) @map("_id")
  order            Order   @relation(fields: [orderId], references: [id])
  orderId          String
  book             Book    @relation(fields: [bookId], references: [id])
  bookId           Int
  quantity         Int     @default(1)
  priceAtPurchase  Int     // Price in cents at time of purchase

  @@index([orderId])
  @@index([bookId])
}

model User {
  id        String   @id @default(auto()) @map("_id")
  email     String   @unique
  name      String?
  password  String
  role      String   @default("user") // "admin" or "user"
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}